<<<<<<< HEAD
// Ios screen
$screen-ios                                    : 320px !default;
//Small screen / tablet
$screen-sm                                     : 768px !default;
$screen-sm-min                                 : $screen-sm !default;
// Medium screen / desktop
$screen-md                                     : 992px !default;
$screen-md-min                                 : $screen-md !default;
// Large screen / wide desktop
$screen-lg                                     : 1200px !default;
$screen-lg-min                                 : $screen-lg !default;
// So media queries don't overlap when required, provide a maximum
$screen-xs-max                                 : ($screen-sm-min - 1) !default;
$screen-sm-max                                 : ($screen-md-min - 1) !default;
$screen-md-max                                 : ($screen-lg-min - 1) !default;
//Grid system
$grid-columns                                  : 12 !default;
$grid-gutter-width                             : 30px !default;
$container-tablet                              : (720px + $grid-gutter-width) !default;
$container-sm                                  : $container-tablet !default;
$container-desktop                             : (940px + $grid-gutter-width) !default;
$container-md                                  : $container-desktop !default;
$container-large-desktop                       : (1170px + $grid-gutter-width) !default;
$container-lg                                  : $container-large-desktop !default;
//Framework grid generation
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }
    #{$list} {
        position: relative;
        min-height: 1px;
        padding-left: ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
    }
}
@mixin calc-grid-column($index, $class, $type) {
    @if ($type==width) and ($index > 0) {
        .col-#{$class}-#{$index} {
            width: percentage(($index / $grid-columns));
        }
    }
}
//[converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}
//[converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }
    #{$list} {
        float: left;
    }
}
//Create grid for specific class
@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
}
//Grid system
@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    width: 100%;
}
//Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
}
//Row
.row {
    @include make-row;
}
.container,
.travelcations-container {
    @include container-fixed;

    @media (min-width: $screen-sm-min) {
        width: $container-sm;
    }
    @media (min-width: $screen-md-min) {
        width: $container-md;
    }
    @media (min-width: $screen-lg-min) {
        width: 1170px;
    }
}

.travelcations-container {
    @media (min-width: 1652px) {
        width: 1622px;
    }
}
//Fluid container
.container-fluid {
    @include container-fixed;
}
//Columns
@include make-grid-columns;
//Extra small grid
@include make-grid(xs);
//Small grid
@media (min-width: $screen-sm-min) {
    @include make-grid(sm);
}
//Medium grid
@media (min-width: $screen-md-min) {
    @include make-grid(md);
}
//Large grid
@media (min-width: $screen-lg-min) {
    @include make-grid(lg);
}
/* custom */

@mixin col( $size: 50%, $gutter: 15px) {
    width: $size;
    padding-left: $gutter;
    padding-right: $gutter
}
=======
// Ios screen
$screen-ios                                    : 320px !default;
//Small screen / tablet
$screen-sm                                     : 768px !default;
$screen-sm-min                                 : $screen-sm !default;
// Medium screen / desktop
$screen-md                                     : 992px !default;
$screen-md-min                                 : $screen-md !default;
// Large screen / wide desktop
$screen-lg                                     : 1200px !default;
$screen-lg-min                                 : $screen-lg !default;
// So media queries don't overlap when required, provide a maximum
$screen-xs-max                                 : ($screen-sm-min - 1) !default;
$screen-sm-max                                 : ($screen-md-min - 1) !default;
$screen-md-max                                 : ($screen-lg-min - 1) !default;
//Grid system
$grid-columns                                  : 12 !default;
$grid-gutter-width                             : 30px !default;
$container-tablet                              : (720px + $grid-gutter-width) !default;
$container-sm                                  : $container-tablet !default;
$container-desktop                             : (940px + $grid-gutter-width) !default;
$container-md                                  : $container-desktop !default;
$container-large-desktop                       : (1170px + $grid-gutter-width) !default;
$container-lg                                  : $container-large-desktop !default;
//Framework grid generation
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }
    #{$list} {
        position: relative;
        min-height: 1px;
        padding-left: ($grid-gutter-width / 2);
        padding-right: ($grid-gutter-width / 2);
    }
}
@mixin calc-grid-column($index, $class, $type) {
    @if ($type==width) and ($index > 0) {
        .col-#{$class}-#{$index} {
            width: percentage(($index / $grid-columns));
        }
    }
}
//[converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}
//[converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }
    #{$list} {
        float: left;
    }
}
//Create grid for specific class
@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
}
//Grid system
@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    width: 100%;
}
//Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    margin-left: ($gutter / -2);
    margin-right: ($gutter / -2);
}
//Row
.row {
    @include make-row;
}
.container,
.travelcations-container {
    @include container-fixed;

    @media (min-width: $screen-sm-min) {
        width: $container-sm;
    }
    @media (min-width: $screen-md-min) {
        width: $container-md;
    }
    @media (min-width: $screen-lg-min) {
        width: 1170px;
    }
}

.travelcations-container {
    @media (min-width: 1652px) {
        width: 1622px;
    }
}
//Fluid container
.container-fluid {
    @include container-fixed;
}
//Columns
@include make-grid-columns;
//Extra small grid
@include make-grid(xs);
//Small grid
@media (min-width: $screen-sm-min) {
    @include make-grid(sm);
}
//Medium grid
@media (min-width: $screen-md-min) {
    @include make-grid(md);
}
//Large grid
@media (min-width: $screen-lg-min) {
    @include make-grid(lg);
}
/* custom */

@mixin col( $size: 50%, $gutter: 15px) {
    width: $size;
    padding-left: $gutter;
    padding-right: $gutter
}
>>>>>>> 386eaa2a57a9c72af4b0b337b2358f696523109a
